scalar Date
# scalar Upload

type File {
  filename: String!
  mimetype: String!
  encoding: String!
}

type User {
  id: Int!
  firstName: String!
  lastName: String
  username: String!
  email: String!
  bio: String
  avatar: String
  createdAt: Date!
  updatedAt: Date!
  following: [User]
  followers: [User]
  totalFollowing: Int
  totalFollowers: Int
  isFollowing: Boolean
  isMe: Boolean
}
type SeeProfileResult {
  ok: Boolean
  error: String
}
type LoginResult {
  ok: Boolean!
  token: String
  error: String
}
type EditProfileResult {
  ok: Boolean
  error: String
}
type FollowUserResult {
  ok: Boolean!
  error: String
}
type UnFollowUserResult {
  ok: Boolean
  error: String
}
type SeeFollowersQuery {
  ok: Boolean!
  error: String
  followers: [User]
  totalPages: Int
}
type SeeFollowingQuery {
  ok: Boolean!
  error: String
  following: [User]
}
type SearchUsersResult {
  ok: Boolean
}
extend type Mutation {
  createAccount(
    firstName: String!
    lastName: String
    username: String
    email: String!
    password: String!
  ): User
  login(username: String!, password: String!): LoginResult!
  editProfile(
    firstName: String
    lastName: String
    username: String
    email: String
    password: String
    bio: String
    avatar: String
  ): EditProfileResult
  followUser(tofollow: String!): FollowUserResult
  unfollowUser(tofollow: String!): UnFollowUserResult
}
extend type Query {
  seeProfile(username: String): User
  seeFollwers(username: String!, page: Int!): SeeFollowersQuery!
  seeFollowing(username: String!, lastid: Int): SeeFollowingQuery!
  searchUsers(keyword: String): [User]
}
